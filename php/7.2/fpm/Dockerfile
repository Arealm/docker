# copy from php offical dockerfile 7.2-fpm

FROM alpine:3.7

# dependencies required for running "phpize"
# these get automatically installed and removed by "docker-php-ext-*" (unless they're already installed)
ENV PHPIZE_DEPS \
        autoconf \
        dpkg-dev dpkg \
        file \
        g++ \
        gcc \
        libc-dev \
        make \
        pkgconf \
        re2c

# persistent / runtime deps
RUN apk add --no-cache --virtual .persistent-deps \
        ca-certificates \
        curl \
        tar \
        xz \
# https://github.com/docker-library/php/issues/494
        libressl

# ensure www-data user exists
RUN set -x \
    && addgroup -g 82 -S www-data \
    && adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F

ENV PHP_VERSION 7.2.5
ENV PHP_URL="https://secure.php.net/get/php-7.2.5.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-7.2.5.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="af70a33b3f7a51510467199b39af151333fbbe4cc21923bad9c7cf64268cddb2" PHP_MD5=""

RUN set -xe; \
    \
    apk add --no-cache --virtual .fetch-deps \
        gnupg \
    ; \
    \
    mkdir -p /usr/src; \
    cd /usr/src; \
    \
    wget -O php.tar.xz "$PHP_URL"; \
    \
    if [ -n "$PHP_SHA256" ]; then \
        echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
    fi; \
    if [ -n "$PHP_MD5" ]; then \
        echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
    fi; \
    \
    if [ -n "$PHP_ASC_URL" ]; then \
        wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
        export GNUPGHOME="$(mktemp -d)"; \
        for key in $GPG_KEYS; do \
            gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
        done; \
        gpg --batch --verify php.tar.xz.asc php.tar.xz; \
        rm -rf "$GNUPGHOME"; \
    fi; \
    \
    apk del .fetch-deps

COPY docker-php-source /usr/local/bin/

RUN set -xe \
    && apk add --no-cache --virtual .build-deps \
        $PHPIZE_DEPS \
        coreutils \
        curl-dev \
        libedit-dev \
        libressl-dev \
        libsodium-dev \
        libxml2-dev \
        sqlite-dev \
        # customer
        bzip2-dev \
        libbz2 \
        libpng-dev \
        jpeg-dev \
        libxpm-dev \
        zlib-dev \
        freetype-dev \
        libmemcached-dev \
        cyrus-sasl-dev \
        libevent-dev \
        gettext-dev \
        gmp-dev \
        imap-dev \
        krb5-dev \
        icu-dev \
        enchant-dev \
        openldap-dev \
        freetds-dev \
        aspell-dev \
        readline-dev \
        libedit-dev \
        net-snmp-dev \
        libxslt-dev \
        tidyhtml-dev@community \
        db-dev \
        gdbm-dev \
        libmcrypt \
        libmcrypt-dev \
        build-base \
        # swoole
        linux-headers \
        # geoip
        geoip-dev \
        # imagemagick
        imagemagick-dev \
        libtool \
        libltdl \
        wget \
    \
    && export CFLAGS="$PHP_CFLAGS" \
        CPPFLAGS="$PHP_CPPFLAGS" \
        LDFLAGS="$PHP_LDFLAGS" \
    && docker-php-source extract \
    && cd /usr/src/php \
    && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
    && ./configure \
        --build="$gnuArch" \
        --with-config-file-path="$PHP_INI_DIR" \
        --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
        --enable-option-checking=fatal \
        --with-sodium=shared \
        --disable-cgi \
        --enable-short-tags \
        --with-curlwrappers \
        --with-cdb \
        --with-flatfile \
        --with-inifile \
        --with-libedit \
        --enable-fileinfo \
        --with-xpm-dir \
        --with-ttf \
        --with-mhash \
        --enable-inline-optimization \
        --enable-pcntl \
        --enable-mbregex \
        --enable-mbstring \
        --enable-shared \
        --enable-session \
        --enable-pdo \
        --enable-xml \
        --enable-libxml \
        --enable-bcmath \
        --enable-calendar \
        --enable-exif \
        --enable-ftp \
        --enable-json \
        --enable-dba \
        --with-gdbm \
        --enable-phar \
        --enable-posix \
        --enable-ctype \
        --enable-shmop \
        --enable-soap \
        --enable-sockets \
        --enable-sysvmsg \
        --enable-sysvsem \
        --enable-xmlreader \
        --enable-sysvshm \
        --enable-zip \
        --enable-wddx \
        --enable-intl \
        --enable-dom \
        --with-bz2 \
        --with-curl \
        --with-enchant \
        --with-gd \
        --with-jpeg-dir \
        --with-png-dir \
        --with-freetype-dir \
        --enable-gd-native-ttf \
        --enable-gd-jis-conv \
        --with-xmlrpc \
        --with-iconv \
        --with-gettext \
        --with-zlib \
        --with-zlib-dir \
        --with-openssl \
        --with-kerberos \
        --with-imap \
        --with-imap-ssl \
        --with-ldap \
        --with-ldap-sasl \
        --with-mcrypt \
        --with-gmp \
        --enable-mysqlnd \
        --with-pdo-mysql \
        --with-mysql \
        --with-mysqli \
        --with-pdo-dblib \
        --with-pspell \
        --with-snmp \
        --enable-simplexml \
        --with-tidy \
        --with-xsl \
        --with-layout=GNU \
        --with-regex=php \
        --with-icu-dir=/usr \
        --with-pcre-regex=/usr \
        --with-readline \
        --with-pear \
        --with-pic \
        --with-libdir=lib \
        --enable-opcache \
        \
# bundled pcre does not support JIT on s390x
# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
        $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
        \
        $PHP_EXTRA_CONFIGURE_ARGS \
    && make -j "$(nproc)" \
    && make install \
    # extension install
    && mkdir -p /usr/src/php/ext \
    && cd /usr/src/php/ext \
    # download
    && curl -fsSL 'http://pecl.php.net/get/swoole-2.1.3.tgz' -o swoole.tgz \
    && curl -fsSL 'http://pecl.php.net/get/geoip-1.1.1.tgz' -o geoip.tgz \
    && curl -fsSL 'http://pecl.php.net/get/igbinary-2.0.5.tgz' -o igbinary.tgz \
    && curl -fsSL 'http://pecl.php.net/get/imagick-3.4.3.tgz' -o imagick.tgz \
    && curl -fsSL 'http://pecl.php.net/get/memcached-3.0.4.tgz' -o memcached.tgz \
    && curl -fsSL 'http://pecl.php.net/get/mongodb-1.4.3.tgz' -o mongodb.tgz \
    && curl -fsSL 'http://pecl.php.net/get/redis-4.0.2.tgz' -o redis.tgz \
    # create folder and decompression
    && mkdir -p swoole geoip igbinary imagick memcached mongodb redis \
    && tar -xf swoole.tgz -C swoole --strip-components=1 && rm swoole.tgz \
    && tar -xf geoip.tgz -C geoip --strip-components=1 && rm geoip.tgz \
    && tar -xf igbinary.tgz -C igbinary --strip-components=1 && rm igbinary.tgz \
    && tar -xf imagick.tgz -C imagick --strip-components=1 && rm imagick.tgz \
    && tar -xf memcached.tgz -C memcached --strip-components=1 && rm memcached.tgz \
    && tar -xf mongodb.tgz -C mongodb --strip-components=1 && rm mongodb.tgz \
    && tar -xf redis.tgz -C redis --strip-components=1 && rm redis.tgz \
    # install
    && cd /usr/src/php/ext/swoole && phpize && ./configure && make && make install \
    && cd /usr/src/php/ext/geoip && phpize && ./configure && make && make install \
    && cd /usr/src/php/ext/igbinary && phpize && ./configure && make && make install \
    && cd /usr/src/php/ext/imagick && phpize && ./configure && make && make install \
    && cd /usr/src/php/ext/memcached && phpize && ./configure && make && make install \
    && cd /usr/src/php/ext/mongodb && phpize && ./configure && make && make install \
    && cd /usr/src/php/ext/redis && phpize && ./configure && make && make install \

    && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
    && make clean \
    && cd / \
    && docker-php-source delete \
    \
    && runDeps="$( \
        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
            | tr ',' '\n' \
            | sort -u \
            | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
    )" \
    && apk add --no-cache --virtual .php-rundeps $runDeps \
    \
    && apk del .build-deps \
    \
# https://github.com/docker-library/php/issues/443
    && pecl update-channels \
    && rm -rf /tmp/pear ~/.pearrc \

    # add php ext config
    && touch /usr/local/etc/php/php.ini \
    && echo "extension=geoip.so" >> /usr/local/etc/php/php.ini \
    && echo "extension=igbinary.so" >> /usr/local/etc/php/php.ini \
    && echo "extension=imagick.so" >> /usr/local/etc/php/php.ini \
    && echo "extension=memcached.so" >> /usr/local/etc/php/php.ini \
    && echo "extension=mongodb.so" >> /usr/local/etc/php/php.ini \
    && echo "extension=redis.so" >> /usr/local/etc/php/php.ini \
    && echo "extension=swoole.so" >> /usr/local/etc/php/php.ini \
    && echo "date.timezone=Asia/Shanghai" >> /usr/local/etc/php/php.ini

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)
RUN docker-php-ext-enable sodium

ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
    && cd /usr/local/etc \
    && if [ -d php-fpm.d ]; then \
        # for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
        sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
        cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
    else \
        # PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
        mkdir php-fpm.d; \
        cp php-fpm.conf.default php-fpm.d/www.conf; \
        { \
            echo '[global]'; \
            echo 'include=etc/php-fpm.d/*.conf'; \
        } | tee php-fpm.conf; \
    fi \
    && { \
        echo '[global]'; \
        echo 'error_log = /proc/self/fd/2'; \
        echo; \
        echo '[www]'; \
        echo '; if we send this to /proc/self/fd/1, it never appears'; \
        echo 'access.log = /proc/self/fd/2'; \
        echo; \
        echo 'clear_env = no'; \
        echo; \
        echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
        echo 'catch_workers_output = yes'; \
    } | tee php-fpm.d/docker.conf \
    && { \
        echo '[global]'; \
        echo 'daemonize = no'; \
        echo; \
        echo '[www]'; \
        echo 'listen = 9000'; \
    } | tee php-fpm.d/zz-docker.conf \
    # install composer
    && php -r "copy('https://install.phpcomposer.com/installer', 'composer-setup.php');" \
    && php composer-setup.php --install-dir=/usr/local/bin --filename=composer \
    && php -r "unlink('composer-setup.php');"

EXPOSE 9000
CMD ["php-fpm"]
##</autogenerated>##